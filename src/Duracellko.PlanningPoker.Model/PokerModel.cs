  
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v1.3.0.5
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Duracellko.PlanningPoker.Model
{
   /// <summary>
   /// Observer is not involved in estimates and cannot vote for estimate. However, he/she
   /// can watch planning poker and see estimates results.  Usually product owner connects
   /// as an observer.
   /// </summary>
   public partial class TeamMember
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected TeamMember()
      {
         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="name">Name of team member</param>
      public TeamMember(string name)
      {
         if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));
         this.Name = name;
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="name">Name of team member</param>
      public static TeamMember Create(string name)
      {
         return new TeamMember(name);
      }

      /*************************************************************************
       * Persistent properties
       *************************************************************************/

      /// <summary>
      /// Identity, Required, Indexed
      /// Unique identifier for this object in this class
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      /// <summary>
      /// Required
      /// Name of team member
      /// </summary>
      [Required]
      public string Name { get; set; }

      /*************************************************************************
       * Persistent navigation properties
       *************************************************************************/

   }
}

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Duracellko.PlanningPoker.Model
{
   /// <summary>
   /// Scrum team is a group of members, who play planning poker, and observers, who watch
   /// the game.
   /// </summary>
   public partial class ScrumTeam
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected ScrumTeam()
      {
         Members = new System.Collections.Generic.HashSet<global::Duracellko.PlanningPoker.Model.TeamMember>();
         AvailableEstimates = new System.Collections.Generic.HashSet<global::Duracellko.PlanningPoker.Model.Estimate>();
         Stories = new System.Collections.Generic.HashSet<global::Duracellko.PlanningPoker.Model.Story>();
         Observers = new System.Collections.Generic.HashSet<global::Duracellko.PlanningPoker.Model.TeamMember>();

         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="name">Gets the Scrum team name.</param>
      /// <param name="scrummaster"></param>
      public ScrumTeam(string name, global::Duracellko.PlanningPoker.Model.TeamMember scrummaster)
      {
         if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));
         this.Name = name;
         if (scrummaster == null) throw new ArgumentNullException(nameof(scrummaster));
         this.ScrumMaster = scrummaster;

         this.Members = new System.Collections.Generic.HashSet<global::Duracellko.PlanningPoker.Model.TeamMember>();
         this.AvailableEstimates = new System.Collections.Generic.HashSet<global::Duracellko.PlanningPoker.Model.Estimate>();
         this.Stories = new System.Collections.Generic.HashSet<global::Duracellko.PlanningPoker.Model.Story>();
         this.Observers = new System.Collections.Generic.HashSet<global::Duracellko.PlanningPoker.Model.TeamMember>();
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="name">Gets the Scrum team name.</param>
      /// <param name="scrummaster"></param>
      public static ScrumTeam Create(string name, global::Duracellko.PlanningPoker.Model.TeamMember scrummaster)
      {
         return new ScrumTeam(name, scrummaster);
      }

      /*************************************************************************
       * Persistent properties
       *************************************************************************/

      /// <summary>
      /// Identity, Required, Indexed
      /// Unique identifier for this object in this class
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      /// <summary>
      /// Required
      /// Gets the Scrum team name.
      /// </summary>
      [Required]
      public string Name { get; set; }

      /*************************************************************************
       * Persistent navigation properties
       *************************************************************************/

      /// <summary>
      /// Gets the collection of members joined to the Scrum team.
      /// </summary>
      public virtual ICollection<global::Duracellko.PlanningPoker.Model.TeamMember> Members { get; private set; }

      /// <summary>
      /// Gets the available estimates the members can pick from.
      /// </summary>
      public virtual ICollection<global::Duracellko.PlanningPoker.Model.Estimate> AvailableEstimates { get; private set; }

      /// <summary>
      /// User stories estimated by this group
      /// </summary>
      public virtual ICollection<global::Duracellko.PlanningPoker.Model.Story> Stories { get; private set; }

      /// <summary>
      /// Gets the observers watching planning poker game of the Scrum team.
      /// </summary>
      public virtual ICollection<global::Duracellko.PlanningPoker.Model.TeamMember> Observers { get; private set; }

      /// <summary>
      /// Required{br/}
      /// Gets the scrum master of the team.
      /// </summary>
      public virtual global::Duracellko.PlanningPoker.Model.TeamMember ScrumMaster { get; set; }

   }
}

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Duracellko.PlanningPoker.Model
{
   /// <summary>
   /// Estimate value of a planning poker card.
   /// </summary>
   public partial class Estimate
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected Estimate()
      {
         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="value">Gets the estimate value. Estimate can be any positive number (usually Fibonacci numbers) or positive infinity or null representing unknown estimate.</param>
      /// <param name="uncertaintylevel">How good is this estimate, based on understanding of the requirements?</param>
      /// <param name="minvalue">Low end of the uncertainly range</param>
      /// <param name="maxvalue">High end of the uncertainly range</param>
      /// <param name="_scrumteam0"></param>
      /// <param name="_story1"></param>
      public Estimate(double value, global::Duracellko.PlanningPoker.Model.Uncertainty uncertaintylevel, double minvalue, double maxvalue, global::Duracellko.PlanningPoker.Model.ScrumTeam _scrumteam0, global::Duracellko.PlanningPoker.Model.Story _story1)
      {
         this.Value = value;
         this.UncertaintyLevel = uncertaintylevel;
         this.MinValue = minvalue;
         this.MaxValue = maxvalue;
         if (_scrumteam0 == null) throw new ArgumentNullException(nameof(_scrumteam0));
         _scrumteam0.AvailableEstimates.Add(this);

         if (_story1 == null) throw new ArgumentNullException(nameof(_story1));
         _story1.Estimate = this;

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="value">Gets the estimate value. Estimate can be any positive number (usually Fibonacci numbers) or positive infinity or null representing unknown estimate.</param>
      /// <param name="uncertaintylevel">How good is this estimate, based on understanding of the requirements?</param>
      /// <param name="minvalue">Low end of the uncertainly range</param>
      /// <param name="maxvalue">High end of the uncertainly range</param>
      /// <param name="_scrumteam0"></param>
      /// <param name="_story1"></param>
      public static Estimate Create(double value, global::Duracellko.PlanningPoker.Model.Uncertainty uncertaintylevel, double minvalue, double maxvalue, global::Duracellko.PlanningPoker.Model.ScrumTeam _scrumteam0, global::Duracellko.PlanningPoker.Model.Story _story1)
      {
         return new Estimate(value, uncertaintylevel, minvalue, maxvalue, _scrumteam0, _story1);
      }

      /*************************************************************************
       * Persistent properties
       *************************************************************************/

      /// <summary>
      /// Identity, Required, Indexed
      /// Unique identifier for this object in this class
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      /// <summary>
      /// Required
      /// Gets the estimate value. Estimate can be any positive number (usually Fibonacci numbers)
      /// or positive infinity or null representing unknown estimate.
      /// </summary>
      [Required]
      public double Value { get; set; }

      /// <summary>
      /// Required
      /// How good is this estimate, based on understanding of the requirements?
      /// </summary>
      [Required]
      public global::Duracellko.PlanningPoker.Model.Uncertainty UncertaintyLevel { get; set; }

      /// <summary>
      /// Required
      /// Low end of the uncertainly range
      /// </summary>
      [Required]
      public double MinValue { get; set; }

      /// <summary>
      /// Required
      /// High end of the uncertainly range
      /// </summary>
      [Required]
      public double MaxValue { get; set; }

      /*************************************************************************
       * Persistent navigation properties
       *************************************************************************/

   }
}

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Duracellko.PlanningPoker.Model
{
   /// <summary>
   /// User story to estimate
   /// </summary>
   public partial class Story
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected Story()
      {
         State = global::Duracellko.PlanningPoker.Model.StoryState.Initial;

         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="state">The team state.</param>
      /// <param name="_scrumteam0"></param>
      public Story(global::Duracellko.PlanningPoker.Model.ScrumTeam _scrumteam0, global::Duracellko.PlanningPoker.Model.StoryState state = global::Duracellko.PlanningPoker.Model.StoryState.Initial)
      {
         this.State = state;
         if (_scrumteam0 == null) throw new ArgumentNullException(nameof(_scrumteam0));
         _scrumteam0.Stories.Add(this);

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="state">The team state.</param>
      /// <param name="_scrumteam0"></param>
      public static Story Create(global::Duracellko.PlanningPoker.Model.ScrumTeam _scrumteam0, global::Duracellko.PlanningPoker.Model.StoryState state = global::Duracellko.PlanningPoker.Model.StoryState.Initial)
      {
         return new Story(_scrumteam0, state);
      }

      /*************************************************************************
       * Persistent properties
       *************************************************************************/

      /// <summary>
      /// Identity, Required, Indexed
      /// Unique identifier for this object in this class
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      /// <summary>
      /// Required, Default value = global::Duracellko.PlanningPoker.Model.StoryState.Initial
      /// The team state.
      /// </summary>
      [Required]
      public global::Duracellko.PlanningPoker.Model.StoryState State { get; set; }

      /*************************************************************************
       * Persistent navigation properties
       *************************************************************************/

      /// <summary>
      /// Agreed upon estimate
      /// </summary>
      public virtual global::Duracellko.PlanningPoker.Model.Estimate Estimate { get; set; }

   }
}

using System;

namespace Duracellko.PlanningPoker.Model
{
   /// <summary>
   /// Specifies status of Scrum team.
   /// </summary>
   public enum StoryState : Int32
   {
      /// <summary>
      /// Scrum team is initial state and estimation has not started yet.
      /// </summary>
      Initial,
      /// <summary>
      /// Estimate is in progress. Members can pick their estimates.
      /// </summary>
      EstimateInProgress,
      /// <summary>
      /// All members picked estimations and the estimate is finished.
      /// </summary>
      EstimateFinished,
      /// <summary>
      /// Estimate was canceled by Scrum master.
      /// </summary>
      EstimateCancelled
   }
}
using System;

namespace Duracellko.PlanningPoker.Model
{
   /// <summary>
   /// Measure of how much you understand the requirements
   /// </summary>
   public enum Uncertainty : Int32
   {
      /// <summary>
      /// Timeboxed activity: estimate is a commitment
      /// </summary>
      None,
      /// <summary>
      /// Excellent understanding of requirements and implementation tactics
      /// </summary>
      Low,
      /// <summary>
      /// Fair understanding of requirements and implementation tactics
      /// </summary>
      Medium,
      /// <summary>
      /// Requirements are fuzzy and/or implementation tactics are unknown
      /// </summary>
      High
   }
}
using System.Data.Entity;

namespace Duracellko.PlanningPoker.Model
{
   /// <inheritdoc/>
   public partial class PokerModelDatabaseInitializer : MigrateDatabaseToLatestVersion<PokerModel, PokerModelDbMigrationConfiguration>
   {
   }
}
using System.Data.Entity.Migrations;

namespace Duracellko.PlanningPoker.Model
{
   /// <inheritdoc/>
   public sealed partial class PokerModelDbMigrationConfiguration : DbMigrationsConfiguration<PokerModel>
   {
      partial void Init();

      /// <inheritdoc/>
      public PokerModelDbMigrationConfiguration()
      {
         AutomaticMigrationsEnabled = false;
         AutomaticMigrationDataLossAllowed = false;
         Init();
      }
   }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.Infrastructure.Annotations;

namespace Duracellko.PlanningPoker.Model
{
   /// <inheritdoc/>
   public partial class PokerModel : System.Data.Entity.DbContext
   {
      #region DbSets

      /// <summary>
      /// Repository for global::Duracellko.PlanningPoker.Model.Estimate - Estimate value of
      /// a planning poker card.
      /// </summary>
      public virtual System.Data.Entity.DbSet<global::Duracellko.PlanningPoker.Model.Estimate> Estimates { get; set; }

      /// <summary>
      /// Repository for global::Duracellko.PlanningPoker.Model.ScrumTeam - Scrum team is a
      /// group of members, who play planning poker, and observers, who watch the game.
      /// </summary>
      public virtual System.Data.Entity.DbSet<global::Duracellko.PlanningPoker.Model.ScrumTeam> ScrumTeams { get; set; }

      /// <summary>
      /// Repository for global::Duracellko.PlanningPoker.Model.Story - User story to estimate
      /// </summary>
      public virtual System.Data.Entity.DbSet<global::Duracellko.PlanningPoker.Model.Story> Stories { get; set; }

      /// <summary>
      /// Repository for global::Duracellko.PlanningPoker.Model.TeamMember - Observer is not
      /// involved in estimates and cannot vote for estimate. However, he/she can watch planning
      /// poker and see estimates results.  Usually product owner connects as an observer.
      /// </summary>
      public virtual System.Data.Entity.DbSet<global::Duracellko.PlanningPoker.Model.TeamMember> TeamMembers { get; set; }
      #endregion DbSets

      #region Constructors

      partial void CustomInit();

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Data Source=.\sqlexpress;Initial Catalog=PlanningPoker;Integrated Security=True";
      /// <inheritdoc />
      public PokerModel() : base(ConnectionString)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<PokerModel>(new PokerModelDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public PokerModel(string connectionString) : base(connectionString)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<PokerModel>(new PokerModelDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public PokerModel(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<PokerModel>(new PokerModelDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public PokerModel(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection) : base(existingConnection, contextOwnsConnection)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<PokerModel>(new PokerModelDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public PokerModel(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection) : base(existingConnection, model, contextOwnsConnection)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<PokerModel>(new PokerModelDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public PokerModel(System.Data.Entity.Infrastructure.DbCompiledModel model) : base(model)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<PokerModel>(new PokerModelDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public PokerModel(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext) : base(objectContext, dbContextOwnsObjectContext)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<PokerModel>(new PokerModelDatabaseInitializer());
         CustomInit();
      }

      #endregion Constructors

      partial void OnModelCreatingImpl(System.Data.Entity.DbModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(System.Data.Entity.DbModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::Duracellko.PlanningPoker.Model.Estimate>()
                     .ToTable("Estimates")
                     .HasKey(t => t.Id);
